{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"For something in between a pytorch and a karpathy/micrograd This may not be the best deep learning framework, but it is a deep learning framework. The Tensor class is a wrapper around a numpy array, except it does Tensor things. tinygrad is also a city in Russia. Installation pip3 install git+https://github.com/geohot/tinygrad.git --upgrade Example from tinygrad.tensor import Tensor x = Tensor.eye(3) y = Tensor([[2.0,0,-2.0]]) z = y.matmul(x).sum() z.backward() print(x.grad) # dz/dx print(y.grad) # dz/dy Same example in torch import torch x = torch.eye(3, requires_grad=True) y = torch.tensor([[2.0,0,-2.0]], requires_grad=True) z = y.matmul(x).sum() z.backward() print(x.grad) # dz/dx print(y.grad) # dz/dy Neural networks? It turns out, a decent autograd tensor library is 90% of what you need for neural networks. Add an optimizer (SGD, RMSprop, and Adam implemented) from tinygrad.optim, write some boilerplate minibatching code, and you have all you need. Neural network example (from test/test_mnist.py) from tinygrad.tensor import Tensor import tinygrad.optim as optim class TinyBobNet: def __init__(self): self.l1 = Tensor.uniform(784, 128) self.l2 = Tensor.uniform(128, 10) def forward(self, x): return x.dot(self.l1).relu().dot(self.l2).logsoftmax() model = TinyBobNet() optim = optim.SGD([model.l1, model.l2], lr=0.001) # ... and complete like pytorch, with (x,y) data out = model.forward(x) loss = out.mul(y).mean() loss.backward() optim.step() GPU Support?! tinygrad supports GPUs through PyOpenCL. from tinygrad.tensor import Tensor (Tensor.ones(4,4).cuda() + Tensor.ones(4,4).cuda()).cpu() ANE Support?!?! So it doesn't work yet, but see the ane directory for code to use the Apple Neural Engine at a low level. ImageNet inference Despite being tiny, tinygrad supports the full EfficientNet. Pass in a picture to discover what it is. ipython3 examples/efficientnet.py https://upload.wikimedia.org/wikipedia/commons/4/41/Chicken.jpg Or, if you have a webcam and cv2 installed ipython3 examples/efficientnet.py webcam PROTIP: Set \"GPU=1\" environment variable if you want this to go faster. PROPROTIP: Set \"DEBUG=1\" environment variable if you want to see why it's slow. The promise of small tinygrad will always be below 1000 lines. If it isn't, we will revert commits until tinygrad becomes smaller. Running tests python3 -m pytest TODO Train an EfficientNet on ImageNet Make broadcasting work on the backward pass (simple please) EfficientNet backward pass Tensors on GPU (a few more backward) Add a language model. BERT? Add a detection model. EfficientDet? Reduce code Increase speed Add features","title":"About"},{"location":"#installation","text":"pip3 install git+https://github.com/geohot/tinygrad.git --upgrade","title":"Installation"},{"location":"#example","text":"from tinygrad.tensor import Tensor x = Tensor.eye(3) y = Tensor([[2.0,0,-2.0]]) z = y.matmul(x).sum() z.backward() print(x.grad) # dz/dx print(y.grad) # dz/dy","title":"Example"},{"location":"#same-example-in-torch","text":"import torch x = torch.eye(3, requires_grad=True) y = torch.tensor([[2.0,0,-2.0]], requires_grad=True) z = y.matmul(x).sum() z.backward() print(x.grad) # dz/dx print(y.grad) # dz/dy","title":"Same example in torch"},{"location":"#neural-networks","text":"It turns out, a decent autograd tensor library is 90% of what you need for neural networks. Add an optimizer (SGD, RMSprop, and Adam implemented) from tinygrad.optim, write some boilerplate minibatching code, and you have all you need.","title":"Neural networks?"},{"location":"#neural-network-example-from-testtest_mnistpy","text":"from tinygrad.tensor import Tensor import tinygrad.optim as optim class TinyBobNet: def __init__(self): self.l1 = Tensor.uniform(784, 128) self.l2 = Tensor.uniform(128, 10) def forward(self, x): return x.dot(self.l1).relu().dot(self.l2).logsoftmax() model = TinyBobNet() optim = optim.SGD([model.l1, model.l2], lr=0.001) # ... and complete like pytorch, with (x,y) data out = model.forward(x) loss = out.mul(y).mean() loss.backward() optim.step()","title":"Neural network example (from test/test_mnist.py)"},{"location":"#gpu-support","text":"tinygrad supports GPUs through PyOpenCL. from tinygrad.tensor import Tensor (Tensor.ones(4,4).cuda() + Tensor.ones(4,4).cuda()).cpu()","title":"GPU Support?!"},{"location":"#ane-support","text":"So it doesn't work yet, but see the ane directory for code to use the Apple Neural Engine at a low level.","title":"ANE Support?!?!"},{"location":"#imagenet-inference","text":"Despite being tiny, tinygrad supports the full EfficientNet. Pass in a picture to discover what it is. ipython3 examples/efficientnet.py https://upload.wikimedia.org/wikipedia/commons/4/41/Chicken.jpg Or, if you have a webcam and cv2 installed ipython3 examples/efficientnet.py webcam PROTIP: Set \"GPU=1\" environment variable if you want this to go faster. PROPROTIP: Set \"DEBUG=1\" environment variable if you want to see why it's slow.","title":"ImageNet inference"},{"location":"#the-promise-of-small","text":"tinygrad will always be below 1000 lines. If it isn't, we will revert commits until tinygrad becomes smaller.","title":"The promise of small"},{"location":"#running-tests","text":"python3 -m pytest","title":"Running tests"},{"location":"#todo","text":"Train an EfficientNet on ImageNet Make broadcasting work on the backward pass (simple please) EfficientNet backward pass Tensors on GPU (a few more backward) Add a language model. BERT? Add a detection model. EfficientDet? Reduce code Increase speed Add features","title":"TODO"},{"location":"Introduction/","text":"Docs","title":"Docs"},{"location":"Introduction/#docs","text":"","title":"Docs"},{"location":"actions/Docker-Deployment/","text":"Docker Deployment Action A GitHub Action that supports docker-compose and Docker Swarm deployments. Examples Below is a brief examples on how the action can be used: ```yaml tab=\"Swarm\" - name: Deploy to Docker swarm uses: wshihadeh/docker-deployment-action@v1 with: remote_docker_host: user@myswarm.com ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }} ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }} deployment_mode: docker-swarm args: my_applicaion ```yaml tab=\"Compose\" - name: Deploy to Docker Host uses: wshihadeh/docker-deployment-action@v1 with: remote_docker_host: user@myswarm.com ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }} ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }} deployment_mode: docker-compose args: up -d pre_deployment_command_args: 'bundle exec rake db:migrate' docker_prune: 'true' pull_images_first: 'true' ```yaml tab=\"Compose with copy\" - name: Deploy to Docker Host uses: wshihadeh/docker-deployment-action@v1 with: remote_docker_host: user@myswarm.com ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }} ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }} deployment_mode: docker-compose copy_stack_file: true deploy_path: /root/my-deployment stack_file_name: docker-compose.yaml keep_files: 5 args: up -d docker_prune: 'false' pull_images_first: 'false' ```yaml tab=\"Swarm with copy\" - name: Deploy to Docker swarm uses: wshihadeh/docker-deployment-action@v1 with: remote_docker_host: user@myswarm.com ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }} ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }} deployment_mode: docker-swarm copy_stack_file: true deploy_path: /root/my-deployment stack_file_name: docker-stack.yaml keep_files: 5 args: my_applicaion Input Configurations Below are all of the supported inputs. Some inputs are considered sensitive information and it should be stored as secrets. args Arguments to pass to the deployment command either docker or docker-compose . The actions will automatically generate the follwing commands for each of the cases. docker stack deploy --compose-file $FILE --log-level debug --host $HOST docker-compose -f $INPUT_STACK_FILE_NAME remote_docker_host Specify Remote Docker host. The input value must be in the follwing format (user@host) ssh_public_key Remote Docker SSH public key. ssh_private_key SSH private key used to connect to the docker host deployment_mode Deployment mode either docker-swarm or docker-compose. Default is docker-compose. copy_stack_file Copy stack file to remote server and deploy from the server. Default is false. deploy_path The path where the stack files will be copied to. Default ~/docker-deployment. stack_file_name Docker stack file used. Default is docker-compose.yaml keep_files Number of the files to be kept on the server. Default is 3. docker_prune A boolean input to trigger docker prune command. pre_deployment_command_args The args for the pre deploument command. Applicable only for docker-compose. pull_images_first Pull docker images before deploying. Applicable only for docker-compose. License This project is licensed under the MIT license. See the LICENSE file for details.","title":"Docker Deployment Action"},{"location":"actions/Docker-Deployment/#docker-deployment-action","text":"A GitHub Action that supports docker-compose and Docker Swarm deployments.","title":"Docker Deployment Action"},{"location":"actions/Docker-Deployment/#examples","text":"Below is a brief examples on how the action can be used: ```yaml tab=\"Swarm\" - name: Deploy to Docker swarm uses: wshihadeh/docker-deployment-action@v1 with: remote_docker_host: user@myswarm.com ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }} ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }} deployment_mode: docker-swarm args: my_applicaion ```yaml tab=\"Compose\" - name: Deploy to Docker Host uses: wshihadeh/docker-deployment-action@v1 with: remote_docker_host: user@myswarm.com ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }} ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }} deployment_mode: docker-compose args: up -d pre_deployment_command_args: 'bundle exec rake db:migrate' docker_prune: 'true' pull_images_first: 'true' ```yaml tab=\"Compose with copy\" - name: Deploy to Docker Host uses: wshihadeh/docker-deployment-action@v1 with: remote_docker_host: user@myswarm.com ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }} ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }} deployment_mode: docker-compose copy_stack_file: true deploy_path: /root/my-deployment stack_file_name: docker-compose.yaml keep_files: 5 args: up -d docker_prune: 'false' pull_images_first: 'false' ```yaml tab=\"Swarm with copy\" - name: Deploy to Docker swarm uses: wshihadeh/docker-deployment-action@v1 with: remote_docker_host: user@myswarm.com ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }} ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }} deployment_mode: docker-swarm copy_stack_file: true deploy_path: /root/my-deployment stack_file_name: docker-stack.yaml keep_files: 5 args: my_applicaion","title":"Examples"},{"location":"actions/Docker-Deployment/#input-configurations","text":"Below are all of the supported inputs. Some inputs are considered sensitive information and it should be stored as secrets.","title":"Input Configurations"},{"location":"actions/Docker-Deployment/#args","text":"Arguments to pass to the deployment command either docker or docker-compose . The actions will automatically generate the follwing commands for each of the cases. docker stack deploy --compose-file $FILE --log-level debug --host $HOST docker-compose -f $INPUT_STACK_FILE_NAME","title":"args"},{"location":"actions/Docker-Deployment/#remote_docker_host","text":"Specify Remote Docker host. The input value must be in the follwing format (user@host)","title":"remote_docker_host"},{"location":"actions/Docker-Deployment/#ssh_public_key","text":"Remote Docker SSH public key.","title":"ssh_public_key"},{"location":"actions/Docker-Deployment/#ssh_private_key","text":"SSH private key used to connect to the docker host","title":"ssh_private_key"},{"location":"actions/Docker-Deployment/#deployment_mode","text":"Deployment mode either docker-swarm or docker-compose. Default is docker-compose.","title":"deployment_mode"},{"location":"actions/Docker-Deployment/#copy_stack_file","text":"Copy stack file to remote server and deploy from the server. Default is false.","title":"copy_stack_file"},{"location":"actions/Docker-Deployment/#deploy_path","text":"The path where the stack files will be copied to. Default ~/docker-deployment.","title":"deploy_path"},{"location":"actions/Docker-Deployment/#stack_file_name","text":"Docker stack file used. Default is docker-compose.yaml","title":"stack_file_name"},{"location":"actions/Docker-Deployment/#keep_files","text":"Number of the files to be kept on the server. Default is 3.","title":"keep_files"},{"location":"actions/Docker-Deployment/#docker_prune","text":"A boolean input to trigger docker prune command.","title":"docker_prune"},{"location":"actions/Docker-Deployment/#pre_deployment_command_args","text":"The args for the pre deploument command. Applicable only for docker-compose.","title":"pre_deployment_command_args"},{"location":"actions/Docker-Deployment/#pull_images_first","text":"Pull docker images before deploying. Applicable only for docker-compose.","title":"pull_images_first"},{"location":"actions/Docker-Deployment/#license","text":"This project is licensed under the MIT license. See the LICENSE file for details.","title":"License"},{"location":"tinygrad/Installation/","text":"Installation pip3 install git+https://github.com/geohot/tinygrad.git --upgrade Example from tinygrad.tensor import Tensor x = Tensor.eye(3) y = Tensor([[2.0,0,-2.0]]) z = y.matmul(x).sum() z.backward() print(x.grad) # dz/dx print(y.grad) # dz/dy","title":"Installation"},{"location":"tinygrad/Installation/#installation","text":"pip3 install git+https://github.com/geohot/tinygrad.git --upgrade","title":"Installation"},{"location":"tinygrad/Installation/#example","text":"from tinygrad.tensor import Tensor x = Tensor.eye(3) y = Tensor([[2.0,0,-2.0]]) z = y.matmul(x).sum() z.backward() print(x.grad) # dz/dx print(y.grad) # dz/dy","title":"Example"}]}